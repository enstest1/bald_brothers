---
description: 
globs: 
alwaysApply: false
---
This document describes the standard directory structure of the Bald Brothers Story Engine and the intended purpose of each major directory and file. Understanding this structure is essential for navigation, development, and maintaining consistency.

## Root Directory

The root directory contains configuration files, main entry points, and top-level documentation.
Use code with caution.
Markdown
.
├── .env.example # Example environment variables
├── .github/ # GitHub specific files (workflows)
├── dist/ # (Generated) Compiled TypeScript output
├── node_modules/ # (Generated) Project dependencies
├── public/ # Static files served by Express
├── package.json # Project metadata and dependencies
├── package-lock.json # Exact dependency versions
├── README.md # Project overview and setup instructions
├── server.ts # Main Express server entry point
├── src/ # Source code for core logic (agents, libs, UI components)
├── server/ # Source code for backend server (routes, schedulers)
└── tsconfig.json # TypeScript compiler configuration
## Key Directories and Their Purpose

### 1. `.github/`
   Contains GitHub-specific configuration files.
   *   **`workflows/`**: Defines GitHub Actions CI/CD pipelines and scheduled jobs.
       *   `daily-chapter.yml`: Workflow for daily automatic chapter generation.
       *   `weekly-close.yml`: Workflow for weekly poll closure and tallying.

### 2. `public/`
   Contains static assets that are served directly by the Express server (e.g., HTML, CSS, client-side JavaScript, images).
   *   Currently configured in `server.ts` via `app.use(express.static("public"));`.

### 3. `server/`
   Houses all backend server-specific logic, primarily related to the Express.js application.
   *   **`routes/`**: Contains route definitions for the API. Each file typically groups related endpoints.
       *   `chapters.ts`: Endpoints related to story chapter generation (e.g., `/api/worlds/:id/arcs/:arcId/progress`).
       *   `polls.ts`: Endpoints for poll management (e.g., `/polls/open`, `/polls/:id/vote`).
   *   **`sched/`**: Contains modules for scheduled tasks managed by `node-cron` or similar, running within the server process.
       *   `closePoll.ts`: Logic for periodically closing polls and tallying results, scheduled by `node-cron`.

### 4. `src/`
   Contains the core application logic, often separable from the direct web server implementation. This includes AI agents, shared libraries, and UI components.
   *   **`agents/`**: Defines AI agents using `feather-ai`.
       *   `chapterAgent.ts`: The `FeatherAgent` responsible for generating story chapters, including its prompts and tools.
   *   **`components/`**: Contains frontend UI components, written in React (TSX).
       *   `Poll.tsx`: A React component for displaying and interacting with polls.
   *   **`lib/`**: Shared utility functions, helper modules, or clients for external services.
       *   `cloudClient.ts`: A client function for interacting with the Bootoshi Cloud API (mem0).

## Key Root Files

*   **`.env.example`**: Template for environment variables. Copy to `.env` and fill in actual values. Crucial for configuration.
*   **`package.json`**: Lists project dependencies, scripts (build, start, dev, test), and metadata.
*   **`README.md`**: Main documentation for the project, including setup, architecture, API endpoints, and deployment.
*   **`server.ts`**: The main entry point for the Node.js/Express.js application. It initializes middleware, sets up routes, starts the server, and initiates schedulers.
*   **`tsconfig.json`**: Configuration file for the TypeScript compiler (`tsc`). Defines how TypeScript code is transpiled to JavaScript, including output directory (`dist`), module system, and path aliases (`@/*`).

## Generated Directories

*   **`dist/`**: This directory is not in source control. It contains the compiled JavaScript code generated by the TypeScript compiler (`npm run build`). The `start` script in `package.json` typically runs the code from this directory (e.g., `node dist/server.js`).

## Modularity and Separation of Concerns

The structure aims for:
*   **Separation of API/Routing from Core Logic**: `server/` handles HTTP requests and routing, while `src/` contains more abstract business logic and AI components.
*   **Clear Grouping**: Related files are grouped (e.g., all poll routes in `polls.ts`, all chapter agent logic in `chapterAgent.ts`).
*   **Configuration Management**: Centralized environment configuration via `.env` and TypeScript settings via `tsconfig.json`.
*   **Automation**: GitHub Actions workflows are clearly separated in `.github/workflows/`.


When adding new files or features, consider where they best fit within this existing structure to maintain organization and clarity.